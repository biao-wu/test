{"version":3,"sources":["route/index.js","component/login/loginReducer.js","store/reducer.js","store/index.js","serviceWorker.js","index.js"],"names":["Home","Loadable","loader","loading","NotFound","Login","LoginLogs","PersonInfo","UpUserInfo","UpUserPwd","Share","AddShare","SearchShare","Dev","ListDev","UpdataDev","OpaMyLogs","OpaAllLogs","Map","Water","AddAdmin","style","color","DltDev","routes","path","component","homeRoutes","initialState","name","combineReducers","loginReducer","state","action","type","createStore","reducer","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","store","map","item","key","from","to","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c0b77f3a.chunk.js","sourcesContent":["import React from \"react\"\nimport Loadable from \"react-loadable\"\nvar Home = Loadable({\n    loader: () => import(\"../App\"),\n    loading: () => <div>loading...</div>\n})\nvar NotFound = Loadable({\n    loader: () => import(\"../component/notfound\"),\n    loading: () => <div>loading...</div>\n})\nvar Login = Loadable({\n    loader: () => import(\"../component/login\"),\n    loading: () => <div>loading...</div>\n})\nvar LoginLogs = Loadable({\n    loader: () => import(\"../component/loginLogs\"),\n    loading: () => <div>loading...</div>\n})\nvar PersonInfo = Loadable({\n    loader: () => import(\"../component/PersonInfo\"),\n    loading: () => <div>loading...</div>\n})\nvar UpUserInfo = Loadable({\n    loader: () => import(\"../component/UpUserInfo\"),\n    loading: () => <div>loading...</div>\n})\nvar UpUserPwd = Loadable({\n    loader: () => import(\"../component/UpUserPwd\"),\n    loading: () => <div>loading...</div>\n})\nvar Share = Loadable({\n    loader: () => import(\"../component/Share\"),\n    loading: () => <div>loading...</div>\n})\nvar AddShare = Loadable({\n    loader: () => import(\"../component/AddShare\"),\n    loading: () => <div>loading...</div>\n})\nvar SearchShare = Loadable({\n    loader: () => import(\"../component/SearchShare\"),\n    loading: () => <div>loading...</div>\n})\nvar Dev = Loadable({\n    loader: () => import(\"../component/Dev\"),\n    loading: () => <div>loading...</div>\n})\nvar ListDev = Loadable({\n    loader: () => import(\"../component/ListDev\"),\n    loading: () => <div>loading...</div>\n})\nvar UpdataDev = Loadable({\n    loader: () => import(\"../component/UpdataDev\"),\n    loading: () => <div>loading...</div>\n})\nvar OpaMyLogs = Loadable({\n    loader: () => import(\"../component/OpaMyLogs\"),\n    loading: () => <div>loading...</div>\n})\nvar OpaAllLogs = Loadable({\n    loader: () => import(\"../component/OpaAllLogs\"),\n    loading: () => <div>loading...</div>\n})\nvar Map = Loadable({\n    loader: () => import(\"../component/Map\"),\n    loading: () => <div>loading...</div>\n})\nvar Water = Loadable({\n    loader: () => import(\"../component/Water\"),\n    loading: () => <div>loading...</div>\n})\nvar AddAdmin = Loadable({\n    loader: () => import(\"../component/AddAdmin\"),\n    loading: () => <h1 style={{ color: \"red\"}}>正在验证是否拥有权限</h1>\n})\nvar DltDev = Loadable({\n    loader: () => import(\"../component/DltDev\"),\n    loading: () => <h1 style={{ color: \"red\"}}>正在验证是否拥有权限</h1>\n})\nexport const routes = [\n    {\n        path: \"/home\",\n        component: Home\n    },\n    {\n        path: \"/404\",\n        component: NotFound\n    },\n    {\n        path: \"/login\",\n        component: Login\n    }\n]\n\n//home路由下的子路由\nexport const homeRoutes=[\n    {\n        path:\"/home/loginLogs\",\n        component:LoginLogs\n    },\n    {\n        path:\"/home/personInfo\",\n        component:PersonInfo\n    },\n    {\n        path:\"/home/upUserInfo\",\n        component: UpUserInfo\n    },\n    {\n        path:\"/home/upUserPwd\",\n        component: UpUserPwd\n    },\n    {\n        path:\"/home/share\",\n        component: Share\n    },\n    {\n        path:\"/home/addShare\",\n        component: AddShare\n    },\n    {\n        path:\"/home/searchShare\",\n        component: SearchShare\n    },\n    {\n        path:\"/home/dev\",\n        component: Dev\n    },\n    //设备列表\n    {\n        path:\"/home/listDev\",\n        component: ListDev\n    },\n    //修改设备信息\n    {\n        path:\"/home/updataDev/:devNum\",\n        component: UpdataDev\n    },\n    //个人操作日志\n    {\n        path:\"/home/opaMyLogs\",\n        component: OpaMyLogs\n    },\n    //所有操作日志\n    {\n        path:\"/home/opaAllLogs\",\n        component: OpaAllLogs\n    },\n    //地图\n    {\n        path:\"/home/map/:location\",\n        component: Map\n    },\n    //水质\n    {\n        path:\"/home/water\",\n        component: Water\n    },\n    //root权限--添加管理员\n    {\n        path:\"/home/addAdmin\",\n        component: AddAdmin\n    },\n    //root权限--删除设备\n    {\n        path:\"/home/dltDev\",\n        component: DltDev\n    }\n]\n","const initialState = {\n    name:\"admin\"\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n    default:\n        return state\n    }\n}\n","import { combineReducers } from \"redux\"\nimport loginReducer from \"../component/login/loginReducer\"\nexport default combineReducers({\n    loginReducer\n})","import { createStore, applyMiddleware } from \"redux\"\nimport reducer from \"./reducer\"\nimport thunk from \"redux-thunk\"\nexport default createStore(reducer, applyMiddleware(thunk))","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from \"react-redux\"\nimport store from \"./store\"\nimport * as serviceWorker from './serviceWorker';\nimport { routes} from \"./route\"\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\"\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <Switch>\n                {\n                    routes.map(item=>{\n                        return <Route key={item.path} path={item.path} component={item.component} />\n                    })\n                }\n                <Redirect from=\"/\" to=\"/home\" exact />\n                <Redirect to=\"/404\" />\n            </Switch>\n        </Router>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}